package tinkoff;

/*
Даня в обеденный перерыв ходит в одно и то же кафе. Ему, как сотруднику банка, положено специальное предложение: при каждой покупке больше, чем на ﻿100100﻿ рублей, Даня получает купон на бесплатный обед.

Даня узнал стоимость своих обедов на ближайшие ﻿nn﻿ дней. Ему хочется минимизировать свои затраты, грамотно используя талоны. Требуется найти минимальные суммарные затраты Дани на обеды.


Формат входных данных

В первой строке дается натуральное число ﻿n(0 \leq n \leq 100).n(0≤n≤100).﻿ В каждой из ﻿nn﻿ строк записана стоимость обеда в каждой из дней (неотрицательное целое число, не больше, чем ﻿300300﻿).


Формат выходных данных

В первой строке выдайте минимально возможную суммарную стоимость обедов.


Замечание

В первом примере Дане придется купить первые ﻿33﻿ обеда, после чего у него появится талон. Этот талон будет выгоднее всего потратить на последний обед. Таким образом, он купит первые ﻿44﻿ обеда и получит пятый бесплатный.

Примеры данных
Пример 1
5
35
40
101
59
63

выходные
235

 */

import java.util.Scanner;

public class Lunches {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        int n = in.nextInt(); // количество обедов
        int res = 0;
        int k1 = 0;
        int k2 = 0;
        int k = 0;
        int inf = Integer.MAX_VALUE;

        int [] a = new int[n]; // стоимость обедов
        int [][] b = new int[n][n];
        int [][] p = new int[n][n];
        int [] r = new int[n]; // результат рост учеников

        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
            if (!(0 < a[i] || a[i] < 300)) {
                return;
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                b[i][j] = -1;
            }
        }

        b[0][0] = a[0];

        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j <= i; j++) {
                if (b[i][j] != -1) {
                    if (j > 0) {
                        if ((b[i + 1][j - 1] > b[i][j]) || (b[i + 1][j - 1] == -1)) {
                            b[i + 1][j - 1] = b[i][j];
                            p[i + 1][j - 1] = j;
                        }
                    }
                    if (a[i+1] > 100) {
                        k = 1;
                    } else {
                        k = 0;
                    }
                    if ((b[i+1][j+k] > b[i][j] + a[i+1]) || (b[i+1][j+k] == -1)) {
                        b[i+1][j+k] = b[i][j] + a[i+1];
                        p[i+1][j+k] = j;
                    }
                }
            }
        }
        res = inf;

        for (int i = 0; i < n; i++) {
            if ((b[n-1][i] != -1) && (b[n-1][i] <= res)) {
                res = b[n-1][i];
            }
        }

        System.out.print(res);
    }
}
